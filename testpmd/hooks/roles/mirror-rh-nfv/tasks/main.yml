---
- name: "Mirror index image"
  shell:
    cmd: >
      skopeo copy 
      --all
      --authfile {{ mrn_pull_secret }}
      --dest-tls-verify=false
      --remove-signatures
      docker://{{ mrn_index_image }}
      docker://{{ mrn_mirror_index_image }}
  register: copy
  retries: 5
  delay: 5
  until:
    - copy is not failed

- name: "Create temp manifest dir"
  tempfile:
    state: directory
  register: mrn_manifest_dir

- name: "Mirror images from index"
  shell:
    cmd: >
      oc adm catalog mirror
      -a {{ mrn_pull_secret }}
      --to-manifests={{ mrn_manifest_dir.path }}
      {{ mrn_mirror_index_image }}
      {{ mrn_local_registry }}

- name: Add index image into ImageContentSourcePolicy
  blockinfile:
    path: "{{ mrn_manifest_dir.path }}/imageContentSourcePolicy.yaml"
    state: present
    marker: ""
    block: |2
        - mirrors:
          - {{ mrn_mirror_index_image | regex_replace(':[^/]+$') }}
          source: {{ mrn_index_image | regex_replace(':[^/]+$') }}

- name: "Apply ImageContentSourcePolicy"
  k8s:
    src: "{{ mrn_manifest_dir.path }}/imageContentSourcePolicy.yaml"
  notify: "Delete temporary directories"

- name: "Wait for a moment to machine configs (if any) to render"
  pause:
    seconds: 60

- name: Wait for updated machine configs to be applied on the nodes
  k8s_info:
    api_version: machineconfiguration.openshift.io/v1
    kind: MachineConfigPool
  register: reg_mcpool_status
  vars:
    status_query: "resources[*].status.conditions[?type=='Updated'].status"
    update_status: "{{ reg_mcpool_status | json_query(status_query) | flatten | unique }}"
  until:
    - update_status == ['True']
  retries: 60
  delay: 60
  ignore_errors: true

- name: Retrieve more logs in the case of failure
  shell: |
    {{ oc_tool_path }} get mcp
    echo "=========="
    {{ oc_tool_path }} get mc
    echo "=========="
    {{ oc_tool_path }} describe mcp worker
    echo "=========="
    for i in {0..3}; do echo "worker-$i" && oc describe node worker-$i | grep Config; done
  register: mcp_logs
  when: reg_mcpool_status.failed

- name: Upload logs into DCI
  copy:
    dest: "{{ job_logs.path }}/cnf-example_mcp_failure_logs.log"
    content: "{{ mcp_logs.stdout }}"

- name: Fail when could not apply machine config on the nodes
  fail:
    msg: "Failed to apply machine config on the nodes"
  when: reg_mcpool_status.failed
...
