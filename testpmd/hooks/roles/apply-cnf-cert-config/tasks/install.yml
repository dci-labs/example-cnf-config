---

# Label pods - only the labels related to exclude connectivity features are applied, as the
# pods are autodiscovered based on the labels provided in tnf_targetpodlabels variable
# in the pipeline

- name: Get pods from example-cnf namespace
  k8s_info:
    api_version: v1
    kind: pod
    namespace: "{{ app_ns }}"
  register: example_cnf_pod_list

# Labels are included after deploying the pods. However, as stated here:
# https://github.com/test-network-function/test-network-function#targetpodlabels
# "It's highly recommended that the labels should be defined in pod definition rather 
# than added after pod is created"
- name: Tag pods with autodiscovery labels related to exclude connectivity features in test suites
  shell: |
    set -ex
    oc label pod -n "{{ app_ns }}" "{{ item.metadata.name }}" test-network-function.com/skip_connectivity_tests=true --overwrite
  when:  item.metadata.name|regex_search(exclude_connectivity_regexp)
  loop: "{{ example_cnf_pod_list.resources }}"

# Label/Annotate operators

- name: Get CSVs from example-cnf namespace
  k8s_info:
    api_version: operators.coreos.com/v1alpha1
    kind: ClusterServiceVersion
    namespace: "{{ app_ns }}"
  register: example_cnf_csv_list

# Subscription names are retrieved from the install plan that corresponds to the CSV.
- name: Tag CSVs with autodiscovery labels/annotations to execute test suites
  shell: |
    set -ex
    
    oc label csv -n "{{ app_ns }}" "{{ item.metadata.name }}" test-network-function.com/operator=target --overwrite
    oc annotate csv -n "{{ app_ns }}" "{{ item.metadata.name }}" test-network-function.com/operator_tests='["OPERATOR_STATUS"]' --overwrite
    
    INSTALL_PLAN_NAMES=($(oc get installplan -n "{{ app_ns }}" | grep "{{ item.metadata.name }}" | awk '{ print $1 }'))
    
    if [ ${#INSTALL_PLAN_NAMES[@]} -ne 0 ]; then

      SUBSCRIPTION_NAMES=()

      for INSTALL_PLAN_NAME in "${INSTALL_PLAN_NAMES[@]}"; do
        SUBSCRIPTION_NAMES=(${SUBSCRIPTION_NAMES[@]} $(oc get installplan "${INSTALL_PLAN_NAME}" -n "{{ app_ns }}" -o json | jq -r ".metadata.ownerReferences[].name"))
      done

      SUBSCRIPTION_NAMES_JSON=$(echo ${SUBSCRIPTION_NAMES[@]} | jq -R 'split (" ")' | jq "unique")
      oc annotate csv -n "{{ app_ns }}" "{{ item.metadata.name }}" test-network-function.com/subscription_name="$SUBSCRIPTION_NAMES_JSON" --overwrite
    fi
  when: item.metadata.name|regex_search(operators_regexp)
  loop: "{{ example_cnf_csv_list.resources }}"

...
