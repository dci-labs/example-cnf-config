---
- name: "Set working namespace"
  set_fact:
    cnf_namespace: "example-cnf"

- name: Get oc version output
  shell: |
    {{ oc_tool_path }} --kubeconfig {{ kubeconfig_path }} version
  register: oc_version_str

- name: Get OCP version
  set_fact:
    ocp_version: "{{ '.'.join(item.split(':')[1].strip().split('.')[0:2]) }}"
    ocp_version_maj: "{{ item.split(':')[1].strip().split('.')[0] }}"
    ocp_version_min: "{{ item.split(':')[1].strip().split('.')[1] }}"
  when: "'Server Version' in item"
  loop: "{{ oc_version_str.stdout_lines }}"

- name: Fail if the ocp version is not set
  fail:
    msg: "OCP version is not set"
  when: not ocp_version

- name: Get example-cnf component details from job.components
  set_fact:
    operator_version: "{{ item['name'] }}"
    example_cnf_index_image: "{{ item['data']['url'] }}:{{ item['name'] }}"
  with_items: "{{ hostvars.localhost.job_info.job.components }}"
  when: item["type"] == "nfv-example-cnf-index"

- name: Create example-cnf facts
  set_fact:
    app_version: v0.2.3
    cnf_app_networks:
      - name: intel-numa0-net1
        count: 2
    packet_generator_networks:
      - name: intel-numa0-net2
        count: 2
    run_migration_test: false
    mac_workaround_enable: false

- name: "Create CNF Namespace"
  k8s:
    api_version: v1
    kind: Namespace
    state: present
    name: "{{ cnf_namespace }}"

# Expecting variables in an array on this form
# sriov_network:
#  - name: intel-numa0-net1
#    vlan: 460
#    policy: intel-numa0-policy1
#    resource: intel_numa0_res1
#    numvfs: 16
#    mtu: 9000
#    device_type: vfio-pci
#    devices:
#      - ens2f1#0-15
# or
#  - policy: intel-dpdk-node-policy
#    resource: intelnics
#    numvfs: 4
#    vendor: 8086
#    deviceid: 1592
#    devices:
#      - ens4f0
#    rootdevices:
#      - "0000:d8:00.0"
#    nodeselector: '"node.openshift.io/nic_type": "intel810"'
- name: Create SriovNetworkNodePolicy
  k8s:
    definition: "{{ lookup('template', 'templates/sriov-policy.yml.j2') }}"
  loop: "{{ sriov_network }}"
  loop_control:
    loop_var: sriov
  when: sriov_network is defined

- name: Create SriovNetwork
  k8s:
    definition: "{{ lookup('template', 'templates/sriov-network.yml.j2') }}"
  loop: "{{ sriov_network }}"
  loop_control:
    loop_var: sriov
  when: sriov_network is defined

# SR-IOV operator reports networks to be well-created,
# but then it takes several minutes
# to see them allocatable on the worker nodes.
# We probably have to open a BZ.
- name: Ensure that SR-IOV networks are allocatable on the nodes
  block:
    - name: Wait to have all networks allocatable on worker nodes
      include_role:
        name: "{{ dci_config_dir }}/hooks/roles/sriov-networks"
  rescue:
    - name: Delete all pods sriov-network-config-daemon-XXXXX
      shell: >
        oc get pods -n openshift-sriov-network-operator --no-headers=true |
        awk '/sriov-network-config-daemon/{print $1}' |
        xargs oc delete -n openshift-sriov-network-operator pod

    - name: Wait again to have all networks allocatable on worker nodes
      include_role:
        name: "{{ dci_config_dir }}/hooks/roles/sriov-networks"

- name: SR-IOV must-gather
  shell: >
    bash {{ dci_config_dir }}/hooks/files/collect-sriov-operator-data.sh | tee {{ job_logs.path }}/collect-sriov-operator-data.txt
  ignore_errors: true

- name: Set mac workround for ocp older than 4.6
  set_fact:
    mac_workaround_enable: true
  when:
    - ocp_version_maj|int == 4
    - ocp_version_min|int < 6

- name: Checkout Example CNF deployment role
  git:
    repo: "https://github.com/rh-nfv-int/nfv-example-cnf-deploy.git"
    dest: "{{ dci_config_dir }}/hooks/{{ cluster_name }}/nfv-example-cnf-deploy"
    version: "{{ example_cnf_deploy_script_version|default('master') }}"
    update: yes
  register: gitresult

- debug: msg="Git hash is {{ gitresult.after }}"

- name: "Install required rpm packages"
  package:
    name:
      - git
      - make
      - python3-openshift
      - python3-pyyaml
      - ansible-collection-community-kubernetes
    state: latest
  become: true

- name: Mirror rh-nfv images when disconnected
  include_role:
    name: "{{ dci_config_dir }}/hooks/roles/mirror-rh-nfv"
  when:
    - dci_disconnected is defined
    - dci_disconnected|bool

- name: Deploy NFV Example CNF catalog
  include_role:
    name: "{{ dci_config_dir }}/hooks/{{ cluster_name }}/nfv-example-cnf-deploy/roles/example-cnf-catalog"

...
